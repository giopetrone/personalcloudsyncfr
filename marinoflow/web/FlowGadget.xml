<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Hello Wave"   height="500">
    <Require feature="wave" />
    <Require feature="dynamic-height"/>
  </ModulePrefs>
  <Content type="html">
    <![CDATA[
     <FORM>
         <input type=button value="Click Me!" id="butCount" onClick="buttonClicked()">

            <INPUT type="button" value="See JSon" name="button2" onClick="var jsonString = Jalava.diagram.persist();
                if (confirm(jsonString)) {
                    // do things if OK
                }">
        </FORM>
        <div id="content_div" style="height: 50px;"></div>
       <script language="JavaScript" src="http://marinoflow.appspot.com/js/Jalava.js"></script>
       <script language="JavaScript" src="http://marinoflow.appspot.com/js/Diagram.js"></script>

              <script language="JavaScript">
            
  var div = document.getElementById('content_div');


 // initialise Jalava here
  function buttonClicked() {
  pipopo = false;
  var input = DOM.createElement("INPUT", "NumberInput", "text");
 input.id = "NONNO";
  input.style.width = "50";
   input.style.border = "10px solid #DDDDDD";
document.body.appendChild(input);
 //   crcr = new Diagram(220, 100, "550", "600");
      var value = parseInt(wave.getState().get('count', '0'));
      var jsonString = Jalava.diagram.persist();
      wave.getState().submitDelta({'count': value + 1});
     wave.getState().submitDelta({'diagramma': jsonString});
    }

  function stateUpdated() {
  if(!wave.getState().get('count')) {
        div.innerHTML = "The count is 0."
      }
      else {
       // div.innerHTML = "The count is " + wave.getState().get('count');
         var newState = wave.getState().get('diagramma');
         Jalava.diagram.load(newState);
        wave.log("The count is " + wave.getState().get('count'));
      }
}
   function initJalava(){
                Jalava.diagram = new Diagram(220, 100, "550", "600");
             //   Jalava.diagram.show();
                var palette = new Palette(new FlowChartPaletteFactory(), 0, 100, 200);
                palette.addItem("rect", "Processing",  Palette.DRAG_TOOL, "http://marinoflow.appspot.com/img/rect.gif");
                palette.addItem("connection", "Connection",  Palette.CLICK_TOOL, "http://marinoflow.appspot.com/img/line.gif");
                palette.addItem("diamond", "Decision", Palette.DRAG_TOOL, "http://marinoflow.appspot.com/img/diamond.gif");
                palette.addItem("parallel", "Input/Output", Palette.DRAG_TOOL, "http://marinoflow.appspot.com/img/parallel.gif");
                palette.addItem("ellipse", "Connection", Palette.DRAG_TOOL, "http://marinoflow.appspot.com/img/ellipse.gif");
                palette.addItem("rounded", "Start/End", Palette.DRAG_TOOL, "http://marinoflow.appspot.com/img/ellipse.gif");
                Jalava.propertyPage = new FlowChartPropertyPage(20, 240, 10);
               //  pi.plu.pre = " ";
            }

 function pippo() {
  if (wave && wave.isInWaveContainer()) {
        wave.setStateCallback(stateUpdated);
      }

 Jalava.addModule("FlowChartPaletteFactory");
           Jalava.addModule("FlowChartPropertyPage");
           Jalava.addModule("UrlGradientBlock");
           Jalava.start(initJalava);  // qui o dopo?
 }
         
         // start Jalava
      
            /*Jalava.addModule("FlowChartPaletteFactory");
            Jalava.addModule("FlowChartPropertyPage");
            Jalava.addModule("UrlGradientBlock");
            Jalava.start(initJalava); */
            
             gadgets.util.registerOnLoadHandler(pippo);
        </script>
       
    ]]>
  </Content>
</Module>